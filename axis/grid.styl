// ------------------------------------------------------
// Grid ported from Jeet (http://jeetframework.com)
// ------------------------------------------------------

gutter = 1

// Centers a containing row within the viewport
center(mw = 1410px)
  clearfix()
  max-width: mw
  float: none !important
  display: block
  margin-right: auto !important
  margin-left: auto !important
  *margin-right: auto !important
  *margin-left: auto !important

// Calculates the column width with gutters.
column(numerator = 1, denominator = 1, number-of-nested-columns = 0, g = gutter)
  clearfix()
  float: left
  if number-of-nested-columns is not 0
    width: ((100 - (g*2) * (number-of-nested-columns - 1)) / number-of-nested-columns)%
    margin-left: (g)%
    margin-right: (g)%
    &:first-child
      margin-left: 0
    &:last-child
      margin-right: 0
  else
    width: (((numerator / denominator) * 100) - (g * 2))%
    margin-left: (g)%
    margin-right: (g)%

// Same as column, but without the gutters
span(numerator = 1, denominator = 1)
  clearfix()
  float: left
  width: ((numerator / denominator) * 100)%
  margin-left: 0
  margin-right: 0

// Offset the column by a fraction of the row
offset(numerator = 0, denominator = 0, left-or-right = left, col-or-span = column)
  if (col-or-span is column) or (col-or-span is col) or (col-or-span is c)
    if (left-or-right is left) or (left-or-right is l)
      margin-left: (((numerator / denominator) * 100) + (g))%
    if (left-or-right is right) or (left-or-right is r)
      margin-right: (((numerator / denominator) * 100) + (g))%
  if (col-or-span is span) or (col-or-span is s)
    if (left-or-right is left) or (left-or-right is l)
      margin-left ((numerator / denominator) * 100)%
    if (left-or-right is right) or (left-or-right is r)
      margin-right ((numerator / denominator) * 100)%

// Returns calculated width of a column or span fraction
-get(numerator = 1, denominator = 1, col-or-span = column)
  if (col-or-span is span) or (col-or-span is s)
    return ((numerator / denominator) * 100)%
  if (col-or-span is column) or (col-or-span is col) or (col-or-span is c)
    return (((numerator / denominator) * 100) - (g * 2))%

// Breakpoint wrapper
bp(w = 705px, mobile-first = false)
  if (mobile-first is mf) or (mobile-first)
    unquote("@media all and (min-width: " + w + ") {")
  else
    unquote("@media all and (max-width: " + w + ") {")
endbp()
  unquote("}")

// Stack grid columns on top of each other
stack(align = center)
  display: block
  width: 100%
  margin-left: auto !important
  margin-right: auto !important
  margin-bottom: (g * 3)%
  if (align is center) or (align is c)
    text-align: center
  if (align is left) or (align is l)
    text-align: left
  if (align is right) or (align is r)
    text-align: right

// Helps to visualize your changes and looks cool as hell while developing
edit()
  body *
    transition: 200ms ease all
    background: rgba(#000, .15)

// Add this to the last element in a row
// if that element isn't aligning properly
pxfix()
  float: none
  overflow: hidden
  width: auto

// Aliases
g = gutter
gut = gutter
col = column
off = offset
breakpoint = bp

// Grid initialize
grid()
  *
    box-sizing: border-box
    *behaviour: box-sizing-path if box-sizing-enabled

  html
    overflow-y: scroll
    overflow-x: hidden

  body
    clearfix()
    width: 100%

  img, video, audio, embed, object, input, iframe
    max-width: 100%